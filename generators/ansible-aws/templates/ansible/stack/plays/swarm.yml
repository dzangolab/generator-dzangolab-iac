---
- name: Setup docker swarm
  hosts: swarm_leader
  tasks:
    - name: install Python Docker module
      ansible.builtin.pip:
        name: docker
        extra_args: --user

    - name: Generate metadata token
      ansible.builtin.uri:
        headers:
          X-aws-ec2-metadata-token-ttl-seconds: 21600
        method: PUT
        return_content: true
        url: http://169.254.169.254/latest/api/token
      register: metadata_token

    - name: Fetch private up IP
      ansible.builtin.uri:
        headers:
          X-aws-ec2-metadata-token: "{{ metadata_token.content | trim }}"
        return_content: yes
        url: http://169.254.169.254/latest/meta-data/local-ipv4
      register: metadata_response

    - name: Set IP address as a fact
      ansible.builtin.set_fact:
        private_ip: "{{ metadata_response.content | trim }}"

    - name: check/init swarm
      docker_swarm:
        state: present
        advertise_addr: "{{ private_ip }}"
      register: __output_swarm

- name: Join managers
  hosts: swarm_managers
  tasks:
    - name: Join swarm managers
      docker_swarm:
        state: join
        timeout: 60
        advertise_addr: enp0s8:2377
        join_token: "{{ hostvars[groups['swarm_managers'][0]]['__output_swarm']['swarm_facts']['JoinTokens']['Manager']}}"
        remote_addrs: "{{ groups['swarm_managers'][0] }}"
      when: inventory_hostname in groups['swarm_managers'] and inventory_hostname not in groups['swarm_managers'][0]

- name: Join workers
  hosts: swarm_workers
  tasks:
    - name: Join swarm workers
      docker_swarm:
        state: join
        timeout: 60
        advertise_addr: enp0s8:2377
        join_token: "{{ hostvars[groups['swarm_managers'][0]]['__output_swarm']['swarm_facts']['JoinTokens']['Worker'] }}"
        remote_addrs: "{{ groups['swarm_managers'][0] }}"
      when: inventory_hostname in groups['swarm_workers']
    