Content-Type: multipart/mixed; boundary="//"
MIME-Version: 1.0

--//
Content-Type: text/cloud-config; charset="utf-8"
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="cloud-config.txt"

#cloud-config

{% if packages %}
packages: 
{% for package in packages %}
  - {{ package }}
{% endfor %}

package_update: true
package_upgrade: true
package_reboot_if_required: true
{% endif %}

write_files:
- content: |
    {
      "log-driver": "json-file",
      "log-opts": {
        "max-size": "10m",
        "max-file": "5"
      }
    }
  path: /etc/docker/daemon.json
- content: |
    {
      "log-driver": "json-file",
      "log-opts": {
        "max-size": "10m",
        "max-file": "5"
      }
    }
  path: /etc/docker/daemon.json
- content: |
    /var/lib/docker/containers/*/*.log {
      compress
      copytruncate
      create
      daily
      dateext
      dateformat -%Y%m%d
      delaycompress
      missingok
      rotate 7
    }
  path: /etc/logrotate.d/docker-container
- content: |
    [Unit]
    Description=dockerPrune Service

    [Service]
    Type=oneshot
    ExecStart=/usr/bin/docker system prune -a -f --volumes
  path: /etc/systemd/system/dockerPrune.service
- content: |
    [Unit]
    Description=dockerPrune Timer

    [Timer]
    OnCalendar=*-*-* 00:13:25
    Persistent=false
    AccuracySec=15s

    [Install]
    WantedBy=timers.target
  path: /etc/systemd/system/dockerPrune.timer

runcmd:
  - dnf install docker -y
  - chmod 644 /etc/docker/daemon.json
  - systemctl start docker
  - systemctl enable docker
{% for key in publicKeyNames %}
  - echo {{ key }} >> /home/ec2-user/.ssh/authorized_keys
{% endfor %}
  - usermod -a -G docker ec2-user
  - curl -O https://bootstrap.pypa.io/get-pip.py
  - python3 get-pip.py
  - docker swarm init --default-addr-pool 192.168.0.0/16 --advertise-addr $(cloud-init query ds.meta-data.local-ipv4)
{% for network in networks %}
  - docker network create -d overlay --attachable {{ network }}
{% endfor %}

--//
Content-Type: text/x-shellscript; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="mount-volumes.txt"

#!/bin/bash

# Mount EBS volumes
# https://kodeweich.com/blogs/automate-ebs-volume-mounting-using-user-data-script-on-ec2

{% for volume in volumes %}
while [[ ! -e {{ volume.device }} ]]; do sleep 1; done

VOLUME_NAME=$(lsblk | grep disk | awk '{print $1}' | while read disk; do echo -n "$disk " && sudo ebsnvme-id -b /dev/$disk; done | grep {{ volume.device }} | awk '{print $1}')
echo "VOLUME_NAME - $VOLUME_NAME"

MOUNT_POINT=$(lsblk -o MOUNTPOINT -nr /dev/$VOLUME_NAME)
if [[ -z "$MOUNT_POINT" ]]
then
  MOUNT_POINT={{ volume.path }}
  FILE_SYSTEM=$(lsblk -o FSTYPE -nr /dev/$VOLUME_NAME)
  echo "FILE_SYSTEM - $FILE_SYSTEM"

  if [[ $FILE_SYSTEM != '{{ volume.filesystem }}' ]]
  then
      mkfs -t {{ volume.filesystem }} /dev/$VOLUME_NAME
  fi

  mkdir -p $MOUNT_POINT
  mount /dev/$VOLUME_NAME $MOUNT_POINT

  cp /etc/fstab /etc/fstab.orig
  VOLUME_ID=$(lsblk -o UUID -nr /dev/$VOLUME_NAME)

  if [[ ! -z $VOLUME_ID ]]
  then
    tee -a /etc/fstab <<EOF
    UUID=$VOLUME_ID  $MOUNT_POINT  {{ volume.filesystem }}  defaults,nofail  0  2
EOF
  fi
fi
echo "EBS Volume Mounted Successfully."
{% endfor %}

--//--
