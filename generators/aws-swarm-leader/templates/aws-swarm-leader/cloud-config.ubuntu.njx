Content-Type: multipart/mixed; boundary="//"
MIME-Version: 1.0

--//
Content-Type: text/cloud-config; charset="utf-8"
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="cloud-config.txt"

#cloud-config
users:
{% for user in users %}
  - name: {{ user.username }}
    groups: {{ user.groups }}
    shell: /bin/bash
    sudo: 'ALL=(ALL) NOPASSWD:ALL'
    ssh-authorized-keys: 
{% for key in user.publicKeys %}
      - {{ key }}
{% endfor %}
{% endfor %}

packages: 
  - apt-transport-https
  - ca-certificates
  - curl
  - software-properties-common
{% for package in packages %}
  - {{ package }}
{% endfor %}

package_update: true
package_upgrade: true
package_reboot_if_required: true

{% if swapSize > 0 -%}
swap:
  filename: {{ swapFile }}
  size: {{ swapSize }}
{%- endif %}

write_files:
- content: |
    {
      "log-driver": "json-file",
      "log-opts": {
        "max-size": "10m",
        "max-file": "5",
      }
    }
  path: /etc/docker/daemon.json

runcmd:
  - sed -i -e '$aAllowUsers {% for user in users %}{{ user.username }}{% endfor %}' /etc/ssh/sshd_config
  - service ssh restart
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt -qy update
  - apt-cache policy docker-ce
  - apt -qy install docker-ce

--//
Content-Type: text/x-shellscript; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="userdata.txt"

#!/bin/bash
{% for volume in volumes %}
# Wait for the EBS Volume to be available
while [ ! -e {{ volume.device }} ]; do sleep 1; done
# Create a filesystem if needed
if [ "$(file -s {{ volume.device }})" == "{{ volume.device }}: data" ]
then
    mkfs -t ext4 {{ volume.device }}
fi

# Create the mount directory
if [ ! -e {{ volume.path }} ]; then
    mkdir {{ volume.path }}
fi

# Add an entry to /etc/fstab to mount this volume at startup
echo '{{ volume.device }}  {{ volume.path }}  ext4  defaults  0 0' | tee -a /etc/fstab

# Mount the volume
mount {{ volume.path }}

# Change permissions
chown -R {{ volume.user }}:{{ volume.group }} {{ volume.path }}
{% endfor %}
--//--