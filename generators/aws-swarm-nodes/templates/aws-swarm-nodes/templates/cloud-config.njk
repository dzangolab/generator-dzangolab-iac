Content-Type: multipart/mixed; boundary="//"
MIME-Version: 1.0

--//
Content-Type: text/cloud-config; charset="utf-8"
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="cloud-config.txt"

#cloud-config

{% if packages %}
packages: 
{% for package in packages %}
  - {{ package }}
{% endfor %}

package_update: true
package_upgrade: true
package_reboot_if_required: true
{% endif %}

runcmd:
  - yum install docker -y
  - systemctl start docker
  - systemctl enable docker
  - usermod -a -G docker ec2-user
  - yum install cronie -y
  - systemctl start crond.service
  - systemctl enable crond.service

--//
Content-Type: text/x-shellscript; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="userdata1.txt"

#!/bin/bash
docker swarm init --default-addr-pool 192.168.0.0/16 --advertise-addr $(cloud-init query ds.meta-data.local-ipv4)

--//
Content-Type: text/x-shellscript; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="userdata2.txt"

#!/bin/bash

# Mount EBS volumes
# https://kodeweich.com/blogs/automate-ebs-volume-mounting-using-user-data-script-on-ec2

{% for volume in volumes %}
while [[ ! -e {{ volume.device }} ]]; do sleep 1; done

VOLUME_NAME=$(lsblk | grep disk | awk '{print $1}' | while read disk; do echo -n "$disk " && sudo ebsnvme-id -b /dev/$disk; done | grep {{ volume.device }} | awk '{print $1}')
echo "VOLUME_NAME - $VOLUME_NAME"

MOUNT_POINT=$(lsblk -o MOUNTPOINT -nr /dev/$VOLUME_NAME)
if [[ -z "$MOUNT_POINT" ]]
then
  MOUNT_POINT={{ volume.path }}
  FILE_SYSTEM=$(lsblk -o FSTYPE -nr /dev/$VOLUME_NAME)
  echo "FILE_SYSTEM - $FILE_SYSTEM"

  if [[ $FILE_SYSTEM != '{{ volume.filesystem }}' ]]
  then
      mkfs -t {{ volume.filesystem }} /dev/$VOLUME_NAME
  fi

  mkdir -p $MOUNT_POINT
  mount /dev/$VOLUME_NAME $MOUNT_POINT

  cp /etc/fstab /etc/fstab.orig
  VOLUME_ID=$(lsblk -o UUID -nr /dev/$VOLUME_NAME)

  if [[ ! -z $VOLUME_ID ]]
  then
    tee -a /etc/fstab <<EOF
    UUID=$VOLUME_ID  $MOUNT_POINT  {{ volume.filesystem }}  defaults,nofail  0  2
EOF
  fi
fi
echo "EBS Volume Mounted Successfully."
{% endfor %}

--//--
